<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Firebase Messenger</title>
  <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-auth-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-database-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-storage-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-messaging-compat.js"></script>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f0f2f5;
      margin: 0; padding: 0;
      display: flex; justify-content: center; align-items: center; height: 100vh;
    }
    #app {
      background: white;
      width: 400px;
      max-width: 90vw;
      border-radius: 8px;
      box-shadow: 0 0 15px rgb(0 0 0 / 0.2);
      display: flex;
      flex-direction: column;
      height: 600px;
      overflow: hidden;
    }
    header {
      padding: 1rem;
      border-bottom: 1px solid #ddd;
      font-weight: bold;
      font-size: 1.2rem;
      display: flex; justify-content: space-between; align-items: center;
    }
    #login, #register, #chat {
      padding: 1rem;
      flex: 1;
      display: none;
      flex-direction: column;
    }
    input, button, textarea {
      font-size: 1rem;
      padding: 0.5rem;
      margin-bottom: 0.8rem;
      border-radius: 4px;
      border: 1px solid #ccc;
      width: 100%;
      box-sizing: border-box;
    }
    textarea {
      resize: vertical;
      height: 60px;
    }
    button {
      cursor: pointer;
      background-color: #007bff;
      border: none;
      color: white;
      transition: background-color 0.3s;
    }
    button:hover {
      background-color: #0056b3;
    }
    #messages {
      flex: 1;
      overflow-y: auto;
      border: 1px solid #ddd;
      padding: 0.5rem;
      margin-bottom: 0.8rem;
      border-radius: 4px;
      background: #fafafa;
    }
    .message {
      margin-bottom: 0.8rem;
      padding: 0.5rem;
      border-radius: 6px;
      background: #e1ffc7;
      max-width: 80%;
    }
    .message.self {
      background: #c7dfff;
      margin-left: auto;
    }
    .message .sender {
      font-weight: bold;
      font-size: 0.85rem;
      margin-bottom: 0.3rem;
    }
    .typing {
      font-style: italic;
      color: #666;
      height: 20px;
      margin-bottom: 0.5rem;
    }
    a.media-link {
      display: block;
      margin-top: 0.2rem;
      color: #0066cc;
      text-decoration: underline;
      font-size: 0.85rem;
      word-break: break-all;
    }
  </style>
</head>
<body>

<div id="app">
  <header>
    <div>Firebase Messenger</div>
    <button id="logoutBtn" style="display:none;">Logout</button>
  </header>

  <section id="login">
    <input type="email" id="loginEmail" placeholder="Email" />
    <input type="password" id="loginPassword" placeholder="Password" />
    <button id="loginBtn">Login</button>
    <button id="toRegisterBtn" style="margin-top: 10px; background: gray;">Register Instead</button>
  </section>

  <section id="register">
    <input type="email" id="registerEmail" placeholder="Email" />
    <input type="password" id="registerPassword" placeholder="Password" />
    <button id="registerBtn">Register</button>
    <button id="toLoginBtn" style="margin-top: 10px; background: gray;">Back to Login</button>
  </section>

  <section id="chat">
    <div id="messages"></div>
    <div class="typing" id="typingIndicator"></div>
    <textarea id="messageInput" placeholder="Type a message..."></textarea>
    <input type="file" id="mediaInput" />
    <button id="sendBtn">Send</button>
  </section>
</div>

<script>
  // Firebase config & init
  const firebaseConfig = {
    apiKey: "AIzaSyCy9CKJ6CELheBhw7Gs0BgsE1E0FsoYdgU",
    authDomain: "project-955237504610034331.firebaseapp.com",
    projectId: "project-955237504610034331",
    storageBucket: "project-955237504610034331.appspot.com",
    messagingSenderId: "76212939677",
    appId: "1:76212939677:web:ef498bc1e4e480ab6e5d74",
    measurementId: "G-WXBEP1LXTX"
  };
  firebase.initializeApp(firebaseConfig);

  const auth = firebase.auth();
  const db = firebase.database();
  const storage = firebase.storage();
  const messaging = firebase.messaging();

  // UI refs
  const loginSection = document.getElementById("login");
  const registerSection = document.getElementById("register");
  const chatSection = document.getElementById("chat");
  const logoutBtn = document.getElementById("logoutBtn");

  const loginEmail = document.getElementById("loginEmail");
  const loginPassword = document.getElementById("loginPassword");
  const loginBtn = document.getElementById("loginBtn");
  const toRegisterBtn = document.getElementById("toRegisterBtn");

  const registerEmail = document.getElementById("registerEmail");
  const registerPassword = document.getElementById("registerPassword");
  const registerBtn = document.getElementById("registerBtn");
  const toLoginBtn = document.getElementById("toLoginBtn");

  const messagesDiv = document.getElementById("messages");
  const messageInput = document.getElementById("messageInput");
  const mediaInput = document.getElementById("mediaInput");
  const sendBtn = document.getElementById("sendBtn");
  const typingIndicator = document.getElementById("typingIndicator");

  // Show/hide helper
  function showSection(section) {
    loginSection.style.display = "none";
    registerSection.style.display = "none";
    chatSection.style.display = "none";
    section.style.display = "flex";
  }

  // Authentication state observer
  auth.onAuthStateChanged(user => {
    if (user) {
      logoutBtn.style.display = "inline-block";
      showSection(chatSection);
      listenMessages();
      listenTyping();
      setTyping(false);
      requestNotificationPermission();
    } else {
      logoutBtn.style.display = "none";
      showSection(loginSection);
      messagesDiv.innerHTML = "";
      typingIndicator.textContent = "";
    }
  });

  // Register & login UI toggles
  toRegisterBtn.onclick = () => showSection(registerSection);
  toLoginBtn.onclick = () => showSection(loginSection);

  // Register user
  registerBtn.onclick = () => {
    const email = registerEmail.value.trim();
    const password = registerPassword.value.trim();
    if (!email || !password) {
      alert("Please enter email and password");
      return;
    }
    auth.createUserWithEmailAndPassword(email, password)
      .catch(e => alert("Register error: " + e.message));
  };

  // Login user
  loginBtn.onclick = () => {
    const email = loginEmail.value.trim();
    const password = loginPassword.value.trim();
    if (!email || !password) {
      alert("Please enter email and password");
      return;
    }
    auth.signInWithEmailAndPassword(email, password)
      .catch(e => alert("Login error: " + e.message));
  };

  // Logout
  logoutBtn.onclick = () => {
    auth.signOut();
  };

  // Listen for messages in realtime DB
  function listenMessages() {
    db.ref("messages").off();
    db.ref("messages").on("value", snapshot => {
      const data = snapshot.val() || {};
      messagesDiv.innerHTML = "";
      Object.values(data).forEach(msg => {
        const div = document.createElement("div");
        div.classList.add("message");
        if (msg.sender === auth.currentUser.email) div.classList.add("self");
        const senderDiv = document.createElement("div");
        senderDiv.textContent = msg.sender;
        senderDiv.classList.add("sender");
        div.appendChild(senderDiv);
        if (msg.text) div.appendChild(document.createTextNode(msg.text));
        if (msg.media) {
          const a = document.createElement("a");
          a.href = msg.media;
          a.textContent = "View Media";
          a.target = "_blank";
          a.className = "media-link";
          div.appendChild(a);
        }
        messagesDiv.appendChild(div);
      });
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
    });
  }

  // Send message with optional media
  sendBtn.onclick = async () => {
    const text = messageInput.value.trim();
    if (!text && !mediaInput.files.length) {
      alert("Enter message or attach a file");
      return;
    }
    let mediaUrl = "";
    if (mediaInput.files.length) {
      const file = mediaInput.files[0];
      const storageRef = storage.ref("media/" + Date.now() + "_" + file.name);
      await storageRef.put(file);
      mediaUrl = await storageRef.getDownloadURL();
    }
    db.ref("messages").push({
      sender: auth.currentUser.email,
      text,
      media: mediaUrl,
      timestamp: firebase.database.ServerValue.TIMESTAMP
    });
    messageInput.value = "";
    mediaInput.value = "";
    setTyping(false);
  };

  // Typing indicator
  let typingTimeout;
  messageInput.addEventListener("input", () => {
    setTyping(true);
    clearTimeout(typingTimeout);
    typingTimeout = setTimeout(() => setTyping(false), 2000);
  });

  function setTyping(isTyping) {
    if (!auth.currentUser) return;
    db.ref("typing/" + auth.currentUser.uid).set(isTyping);
  }

  function listenTyping() {
    db.ref("typing").on("value", snapshot => {
      const val = snapshot.val() || {};
      const someoneTyping = Object.entries(val).some(([uid, typing]) => {
        return uid !== auth.currentUser.uid && typing === true;
      });
      typingIndicator.textContent = someoneTyping ? "Someone is typing..." : "";
    });
  }

  // Push notifications setup
  async function requestNotificationPermission() {
    try {
      await Notification.requestPermission();
      if (Notification.permission === "granted") {
        const token = await messaging.getToken({
          vapidKey: "YOUR_PUBLIC_VAPID_KEY_HERE"
        });
        console.log("FCM Token:", token);
        // You can send this token to your server to send notifications to this device
      }
    } catch (err) {
      console.error("Notification permission error:", err);
    }
  }

  // Handle foreground messages
  messaging.onMessage(payload => {
    alert(`Notification:\n${payload.notification.title}\n${payload.notification.body}`);
  });

</script>

<!-- Service Worker registration -->
<script>
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('firebase-messaging-sw.js')
    .then(reg => console.log('Service Worker Registered', reg))
    .catch(err => console.error('Service Worker registration failed:', err));
  }
</script>

</body>
</html>
