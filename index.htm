// Firebase Messenger App with Stylish UI, Registration, Typing Indicator, Push Notifications (React + Firebase)

import React, { useEffect, useState } from "react";
import { initializeApp } from "firebase/app";
import {
  getAuth,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  onAuthStateChanged,
  signOut,
} from "firebase/auth";
import {
  getDatabase,
  ref,
  push,
  onValue,
  set,
  serverTimestamp,
} from "firebase/database";
import {
  getStorage,
  ref as sRef,
  uploadBytes,
  getDownloadURL,
} from "firebase/storage";
import {
  getMessaging,
  getToken,
  onMessage
} from "firebase/messaging";

import "tailwindcss/tailwind.css";

const firebaseConfig = {
  apiKey: "AIzaSyCy9CKJ6CELheBhw7Gs0BgsE1E0FsoYdgU",
  authDomain: "project-955237504610034331.firebaseapp.com",
  projectId: "project-955237504610034331",
  storageBucket: "project-955237504610034331.appspot.com",
  messagingSenderId: "76212939677",
  appId: "1:76212939677:web:ef498bc1e4e480ab6e5d74",
  measurementId: "G-WXBEP1LXTX"
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getDatabase(app);
const storage = getStorage(app);
const messaging = getMessaging(app);

export default function App() {
  const [user, setUser] = useState(null);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [message, setMessage] = useState("");
  const [messages, setMessages] = useState([]);
  const [mediaFile, setMediaFile] = useState(null);
  const [typing, setTyping] = useState(false);
  const [otherTyping, setOtherTyping] = useState(false);
  const [isRegistering, setIsRegistering] = useState(false);

  useEffect(() => {
    onAuthStateChanged(auth, async (u) => {
      if (u) {
        setUser(u);
        const typingRef = ref(db, `typing/${u.uid}`);
        set(typingRef, false);
        await requestNotificationPermission();
      }
    });

    const messagesRef = ref(db, "messages");
    onValue(messagesRef, (snapshot) => {
      const data = snapshot.val();
      const msgList = data ? Object.values(data) : [];
      setMessages(msgList);
    });

    onValue(ref(db, "typing"), (snapshot) => {
      const data = snapshot.val() || {};
      const othersTyping = Object.entries(data).some(
        ([uid, isTyping]) => uid !== auth.currentUser?.uid && isTyping
      );
      setOtherTyping(othersTyping);
    });

    onMessage(messaging, (payload) => {
      alert(`Notification: ${payload.notification.title} - ${payload.notification.body}`);
    });
  }, []);

  const requestNotificationPermission = async () => {
    try {
      const token = await getToken(messaging, { vapidKey: "YOUR_PUBLIC_VAPID_KEY_HERE" });
      console.log("FCM Token:", token);
    } catch (err) {
      console.error("Unable to get permission to notify.", err);
    }
  };

  const login = async () => {
    try {
      await signInWithEmailAndPassword(auth, email, password);
    } catch (e) {
      alert("Login failed: " + e.message);
    }
  };

  const register = async () => {
    try {
      await createUserWithEmailAndPassword(auth, email, password);
    } catch (e) {
      alert("Registration failed: " + e.message);
    }
  };

  const logout = async () => {
    await signOut(auth);
    setUser(null);
  };

  const sendMessage = async () => {
    let mediaUrl = "";

    if (mediaFile) {
      const fileRef = sRef(storage, `media/${Date.now()}_${mediaFile.name}`);
      await uploadBytes(fileRef, mediaFile);
      mediaUrl = await getDownloadURL(fileRef);
    }

    await push(ref(db, "messages"), {
      sender: user.email,
      text: message,
      media: mediaUrl,
      timestamp: serverTimestamp()
    });

    setMessage("");
    setMediaFile(null);
    setTyping(false);
    await set(ref(db, `typing/${user.uid}`), false);
  };

  const handleTyping = async (e) => {
    const val = e.target.value;
    setMessage(val);
    const currentlyTyping = val.length > 0;
    if (currentlyTyping !== typing) {
      setTyping(currentlyTyping);
      await set(ref(db, `typing/${user.uid}`), currentlyTyping);
    }
  };

  if (!user) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-gray-100">
        <div className="bg-white p-6 rounded-xl shadow-md w-full max-w-sm">
          <h2 className="text-2xl font-bold mb-4 text-center">{isRegistering ? "Register" : "Login"}</h2>
          <input
            type="email"
            placeholder="Email"
            className="border p-2 w-full my-2 rounded"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
          <input
            type="password"
            placeholder="Password"
            className="border p-2 w-full my-2 rounded"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
          {isRegistering ? (
            <button className="bg-green-500 w-full text-white px-4 py-2 rounded" onClick={register}>
              Register
            </button>
          ) : (
            <button className="bg-blue-500 w-full text-white px-4 py-2 rounded" onClick={login}>
              Login
            </button>
          )}
          <button className="text-blue-700 underline mt-4 block w-full" onClick={() => setIsRegistering(!isRegistering)}>
            {isRegistering ? "Already have an account? Login" : "No account? Register"}
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100 p-4">
      <div className="max-w-xl mx-auto">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-2xl font-bold">Messenger</h2>
          <button className="text-red-500 underline" onClick={logout}>Logout</button>
        </div>
        <div className="bg-white p-4 rounded shadow max-h-96 overflow-y-auto">
          {messages.map((msg, index) => (
            <div key={index} className="mb-3">
              <p className="font-semibold">{msg.sender}</p>
              <p>{msg.text}</p>
              {msg.media && (
                <a href={msg.media} target="_blank" rel="noopener noreferrer" className="text-blue-500 text-sm">
                  View Media
                </a>
              )}
            </div>
          ))}
          {otherTyping && <p className="italic text-sm text-gray-500">Someone is typing...</p>}
        </div>
        <div className="mt-4">
          <textarea
            className="w-full p-2 border rounded"
            rows="2"
            placeholder="Type your message..."
            value={message}
            onChange={handleTyping}
          ></textarea>
          <input type="file" onChange={(e) => setMediaFile(e.target.files[0])} className="my-2 block" />
          <button className="bg-green-600 text-white px-4 py-2 rounded" onClick={sendMessage}>Send</button>
        </div>
      </div>
    </div>
  );
}

// ðŸ”” Additional Setup Required for Push Notifications:
// 1. Create a file: public/firebase-messaging-sw.js
//    self.addEventListener('push', function(event) {
//      const payload = event.data.json();
//      event.waitUntil(
//        self.registration.showNotification(payload.notification.title, {
//          body: payload.notification.body,
//          icon: '/logo192.png'
//        })
//      );
//    });
//
// 2. Replace YOUR_PUBLIC_VAPID_KEY_HERE with your actual VAPID key from Firebase project settings.
// 3. Enable Firebase Cloud Messaging in your Firebase Console.
// 4. Make sure hosting supports HTTPS for notifications.
